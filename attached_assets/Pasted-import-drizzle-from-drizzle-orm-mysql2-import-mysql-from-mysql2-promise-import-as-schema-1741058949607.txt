import { drizzle } from 'drizzle-orm/mysql2';
import mysql from 'mysql2/promise';
import * as schema from "@shared/schema";
import dotenv from 'dotenv';


console.log("✅ db.ts se está ejecutando...");

// 🚀 Cargar variables de entorno
dotenv.config();

// 🔎 Verificar si `.env` se está cargando correctamente
console.log("🚀 Iniciando la carga de MySQL...");
console.log("🔹 ENV Variables:");
console.log("DATABASE_URL:", process.env.DATABASE_URL);
console.log("MYSQL_HOST:", process.env.MYSQL_HOST);
console.log("MYSQL_USER:", process.env.MYSQL_USER);
console.log("MYSQL_PASSWORD:", process.env.MYSQL_PASSWORD ? "********" : "NO PASSWORD");
console.log("MYSQL_PORT:", process.env.MYSQL_PORT);

// 📌 Si `DATABASE_URL` no está definida, detener la ejecución
if (!process.env.DATABASE_URL) {
  console.error('❌ ERROR: DATABASE_URL environment variable is not set!');
  process.exit(1);
}

// 📌 Verificar que `DATABASE_URL` tiene un formato correcto antes de parsearla
let poolConfig;
try {
  const url = new URL(process.env.DATABASE_URL);
  poolConfig = {
    host: url.hostname,
    port: parseInt(url.port) || 3306,
    user: url.username,
    password: url.password,
    database: url.pathname.replace('/', ''),
    waitForConnections: true,
    connectionLimit: 10,
    maxIdle: 10,
    idleTimeout: 60000,
    queueLimit: 0,
    enableKeepAlive: true,
    keepAliveInitialDelay: 0,
    multipleStatements: true,
    connectTimeout: 30000, // 30s timeout
    timezone: 'Z', // ✅ Corregir problema de zona horaria
  };
} catch (error) {
  console.error("❌ ERROR: Invalid DATABASE_URL format!", error);
  process.exit(1);
}

// ✅ Confirmar configuración antes de conectar
console.log('✅ MySQL Configuration:', poolConfig);

// 📌 Crear conexión a MySQL
const poolConnection = mysql.createPool(poolConfig);

// 📌 Manejador de errores en la conexión
poolConnection.on('error', (err: any) => {
  console.error('❌ Unexpected error on idle MySQL connection:', err);
});

// 📌 Exportar conexión con Drizzle ORM
export const db = drizzle(poolConnection, { schema, mode: 'default' });

// 📌 Función de prueba de conexión
export async function testConnection() {
  try {
    console.log('🔄 Testing MySQL connection...');
    console.log(`🔹 Host: ${poolConfig.host}`);
    console.log(`🔹 Port: ${poolConfig.port}`);
    console.log(`🔹 User: ${poolConfig.user}`);

    const connection = await mysql.createConnection(poolConfig);
    await connection.connect();
    console.log('✅ MySQL connection successful');

    // 🔎 Prueba de consulta
    const [result] = await connection.execute('SELECT 1');
    console.log('✅ MySQL query test successful:', result);

    await connection.end();
    return true;
  } catch (error: any) {
    console.error('❌ MySQL connection failed:', error);
    console.error('Error details:', {
      code: error.code,
      errno: error.errno,
      sqlState: error.sqlState,
      sqlMessage: error.sqlMessage,
      host: poolConfig.host,
      port: poolConfig.port,
    });
    return false;
  }
}
